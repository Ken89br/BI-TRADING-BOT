#heikein ashi

Categoria	   =     Indicadores
Tendência =     =    ADX, EMA, SMA, Supertrend, Ichimoku, DMI, Parabolic SAR
Momentum	   =     RSI, Stochastic, CCI, Momentum, ROC, Williams %R
Volatilidade	 =   Bollinger Bands, ATR, Keltner, Donchian, Envelope
Volume           =   Chaikin Money Flow, A/D, VWAP, Market Profile
Reversão / Price Action	= Wick Reversal, Heikin Ashi, Fibonacci, Price Action, Elliott Wave, ZigZag
Confirmação visual	Heikin Ashi, Ichimoku

#strategy/macd_reversal.py
import numpy as np
from collections import deque
from config import CONFIG
from strategy.candlestick_patterns import detect_patterns, PATTERN_STRENGTH

class MACDReversalStrategy:
    def __init__(self, config=None):
        self.fast = config.get('fast', 12) if config else 12
        self.slow = config.get('slow', 26) if config else 26
        self.signal = config.get('signal', 9) if config else 9
        self.threshold = config.get('threshold', 0.1) if config else 0.1
        self.min_history = max(self.slow, self.signal) + 10

        self.price_buffer = deque(maxlen=self.slow * 2)
        self.macd_buffer = deque(maxlen=5)
        self.hist_buffer = deque(maxlen=5)
        self.candle_lookback = config.get('candle_lookback', 3) if config else 3
        self.pattern_boost = config.get('pattern_boost', 0.2) if config else 0.2

    def _calculate_macd(self, prices):
        if len(prices) < self.slow:
            return None, None, None
        fast_ema = self._ema(prices, self.fast)
        slow_ema = self._ema(prices, self.slow)
        if fast_ema is None or slow_ema is None:
            return None, None, None
        macd_line = fast_ema - slow_ema
        if len(macd_line) >= self.signal:
            signal_line = self._ema(macd_line[-self.signal*2:], self.signal)
        else:
            signal_line = None
        histogram = macd_line[-1] - signal_line[-1] if signal_line is not None else None
        return macd_line[-1], signal_line[-1] if signal_line is not None else None, histogram

    def _ema(self, data, window):
        if len(data) < window:
            return None
        weights = np.exp(np.linspace(-1., 0., window))
        weights /= weights.sum()
        padded = np.concatenate([np.ones(window-1)*data[0], data])
        return np.convolve(padded, weights, mode='valid')

    def _apply_pattern_boost(self, signal, patterns):
        if not signal or not patterns:
            return signal
        direction = signal["signal"]
        # MACD reversal é reversão: usa padrões do config
        if direction == "up":
            confirm_patterns = CONFIG["candlestick_patterns"]["reversal_up"]
        elif direction == "down":
            confirm_patterns = CONFIG["candlestick_patterns"]["reversal_down"]
        else:
            confirm_patterns = []
        pattern_strength = 0
        for pattern in patterns:
            if pattern in confirm_patterns:
                pattern_strength += PATTERN_STRENGTH.get(pattern, 0.1)
        if pattern_strength > 0:
            boost = int(pattern_strength * 20 * self.pattern_boost)
            signal["confidence"] = min(100, signal.get("confidence", 70) + boost)
            signal["patterns"] = patterns
            signal["pattern_strength"] = pattern_strength
        return signal

    def generate_signal(self, data):
        try:
            candles = data.get("history", [])
            if len(candles) < max(self.min_history, self.candle_lookback):
                return None
            self.price_buffer.extend([c['close'] for c in candles[-self.min_history:]])
            macd, signal_line, hist = self._calculate_macd(np.array(self.price_buffer, dtype=np.float64))
            if macd is None or signal_line is None:
                return None
            self.macd_buffer.append(macd)
            self.hist_buffer.append(hist)
            if len(self.hist_buffer) < 2:
                return None
            result_signal = None
            strength = "medium"
            prev_hist, curr_hist = self.hist_buffer[-2], self.hist_buffer[-1]
            price_above_ma = candles[-1]['close'] > np.mean([c['close'] for c in candles[-self.slow:]])
            volume_spike = candles[-1].get('volume', 0) > 1.5 * np.mean([c.get('volume', 0) for c in candles[-5:-1]] or [1])
            if (prev_hist < 0 < curr_hist) or (prev_hist < -self.threshold and curr_hist > -self.threshold/2):
                if price_above_ma:
                    strength = "high"
                result_signal = self._package("up", candles, strength, macd, signal_line, hist)
            elif (prev_hist > 0 > curr_hist) or (prev_hist > self.threshold and curr_hist < self.threshold/2):
                if not price_above_ma:
                    strength = "high"
                result_signal = self._package("down", candles, strength, macd, signal_line, hist)
            if result_signal and strength == "medium" and volume_spike:
                result_signal['confidence'] += 10
            # BOOST: padrões de vela
            if result_signal:
                patterns = detect_patterns(candles[-self.candle_lookback:])
                result_signal = self._apply_pattern_boost(result_signal, patterns)
            return result_signal
        except Exception as e:
            print(f"MACDReversal error: {str(e)}")
            return None

    def _package(self, signal, candles, strength, macd, signal_line, hist):
        latest = candles[-1]
        price = float(latest['close'])
        high = float(latest['high'])
        low = float(latest['low'])
        base_conf = {"high": 85, "medium": 70, "low": 55}.get(strength, 50)
        hist_boost = min(20, abs(hist) * 100)
        ma_boost = 10 if signal == "up" and price > signal_line else \
                  -10 if signal == "down" and price < signal_line else 0
        confidence = min(100, base_conf + hist_boost + ma_boost)
        return {
            "signal": signal,
            "price": price,
            "high": high,
            "low": low,
            "volume": latest.get('volume', 0),
            "macd": macd,
            "signal_line": signal_line,
            "histogram": hist,
            "recommend_entry": (high + low) / 2,
            "recommend_stop": low if signal == "up" else high,
            "strength": strength,
            "confidence": int(confidence),
            "indicators": {
                "price_vs_signal": price / signal_line if signal_line else 1,
                "macd_cross": "golden" if signal == "up" else "death",
                "volatility": np.std([c['close'] for c in candles[-10:]]) if len(candles) >= 10 else 0
            }
    }
